#!/bin/bash

# General name for state file
name=${NAME:-test.local}

die () {
    echo; echo "ERROR: $1"; echo; exit 1
}

if [ -z  $AWS_ACCESS_KEY_ID ];          then die "Please specify AWS credentials - AWS_ACCESS_KEY_ID variable empty"; fi
if [ -z  $AWS_SECRET_ACCESS_KEY ];      then die "Please specify AWS credentials - AWS_SECRET_ACCESS_KEY variable empty"; fi
if [ -z  $AWS_DEFAULT_REGION ];         then die "Please specify AWS credentials - AWS_DEFAULT_REGION variable empty"; fi
if [ -z  $AWS_TERRAFORM_STATE_BUCKET ]; then die "Please specify AWS credentials - AWS_TERRAFORM_STATE_BUCKET variable empty"; fi


exitcode=0
curdir=$(pwd)

# Check and create bucket for terraform states
#
if ! aws s3 ls $AWS_TERRAFORM_STATE_BUCKET >/dev/null 2>&1
  then
    aws s3 mb s3://$AWS_TERRAFORM_STATE_BUCKET
    exitcode=$?
fi
[ $exitcode -ne 0 ] && die "terraform can't access or create S3 bucket to store terraform state files"

# Initialize remote storage for terraform state file
cd config/
if [ ! -f .terraform/terraform.tfstate ]
  then
    echo "Set Terraform remote S3 state"
    terraform remote config \
      -backend=s3 \
      -backend-config="bucket=$AWS_TERRAFORM_STATE_BUCKET" \
      -backend-config="region=$AWS_DEFAULT_REGION" \
      -backend-config="key=${name}-$AWS_DEFAULT_REGION.tfstate"
    exitcode=$?
  else
    echo "Pull Terraform remote S3 state"
    terraform remote pull
    exitcode=$?
fi

if [ $exitcode -ne 0 ]; then die "terraform can't sync remote state"; fi

# Apply changes
terraform get ../tf || exitcode=$?
terraform plan -var "region=\"$AWS_DEFAULT_REGION\"" -var "name=\"$name\"" ../tf || exitcode=$?
terraform remote push || exitcode=$?

if [ $exitcode -ne 0 ]; then die "terraform got error while perform plan"; fi

cd $curdir
echo "Done."
